function [xnew,ynew, plist] = finespacedcontour(x, y, spacing, genplist)% [xnew,ynew, plist] = finespacedcontour(x, y, spacing, genplist)%  Finely samples a polygonal contour at uniform intervals%  given by 'spacing' %  If genplist == 1, returns a list of indices of points on %  the _new_ contour that correspond to the vertices of the%  original contour. Otherwise, returns an empty plistx=x(:); y = y(:);if length(x) ~= length(y)   error('the x and y vectors defining the contour must have equal lengths!');end;N = length(x);  if(x(N) == x(1) & y(N) == y(1))    closed = 1;else closed = 0;end    dx = x(2:N)- x(1:N-1);dy = y(2:N)- y(1:N-1);d = sqrt(dx.*dx + dy.*dy);      % pairwise distances between points;d = [0;d];                      % distance of point(1) from itself is zero;for i = 1:N    cumd(i) = sum(d(1:i));      % cumulative distances from the first point;end;cumd = cumd(:);totlength = cumd(N);% KLUGE to take care of the case where spacing is less than the length of% the whole contour: if totlength < spacing     spacing = totlength; end;if totlength == 0    z = 1;end;% Adjust spacing so that it's an integral factor of totlength  %spacing = totlength/(round(totlength/spacing)+1);di = 0:spacing:totlength;di = di(:);xnew = interp1(cumd,x,di);ynew = interp1(cumd,y,di);if(genplist)    plist = ones(N-1,1);    for i = 2:N-1        neighbors = [floor(cumd(i)/spacing) + 1; ceil(cumd(i)/spacing) + 1];        distances = di(neighbors) - (cumd(i)*ones(2,1));        [y_, closestneighbor] = min(abs(distances));        plist(i) = floor(cumd(i)/spacing) + closestneighbor;    endelse    plist = [];endN2 = length(xnew);if (totlength - di(length(di)) < spacing/2)   xnew = xnew(1:N2-1);   ynew = ynew(1:N2-1);end;xnew = xnew(:);ynew = ynew(:);if(closed)                          % if the input contour was closed...    xnew = [xnew; xnew(1)];     ynew = [ynew; ynew(1)];  else    % in open case, REPLACE last point with original last point.    xnew(end) = x(end);    ynew(end) = y(end);end;        